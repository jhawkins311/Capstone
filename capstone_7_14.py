# -*- coding: utf-8 -*-
"""Capstone_7.14

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k0U4M9LOQAda9DH5dGIt0_X-ZOb4Wc1p
"""

# Streamlit Synthetic Data Evaluation Tool
import streamlit as st
import pandas as pd
from sdv.metadata import SingleTableMetadata
from sdv.single_table import (
    CTGANSynthesizer,
    TVAESynthesizer,
    GaussianCopulaSynthesizer
)
from sdv.evaluation.single_table import evaluate_quality, run_diagnostic

# Title and Introduction
st.title("Synthetic Data Evaluation Tool")
st.markdown("""
This tool helps novice analysts generate and evaluate synthetic data.
Upload a CSV file, select your sensitive and target columns, and compare synthetic datasets.
""")

# Upload File
uploaded_file = st.file_uploader("Upload your CSV dataset", type="csv")

if uploaded_file:
    df = pd.read_csv(uploaded_file)
    st.write("## Dataset Preview")
    st.write(df.head())

    # Column Selection
    columns = df.columns.tolist()
    sensitive_cols = st.multiselect("Select sensitive columns (for privacy)", columns)
    target_col = st.selectbox("Select a target column (for ML evaluation, optional)", [None] + columns)

    # Metadata
    metadata = SingleTableMetadata()
    metadata.detect_from_dataframe(data=df)
    st.write("## Metadata")
    st.json(metadata.to_dict())

    if st.button("Generate Synthetic Data"):
        st.write("## Generating Synthetic Data")

        # Synthetic data generation (CTGAN)
        ctgan = CTGANSynthesizer(metadata, epochs=300)
        ctgan.fit(df)
        synthetic_ctgan = ctgan.sample(len(df))

        # Synthetic data generation (TVAE)
        tvae = TVAESynthesizer(metadata, epochs=300)
        tvae.fit(df)
        synthetic_tvae = tvae.sample(len(df))

        # Synthetic data generation (Gaussian Copula)
        gaussian = GaussianCopulaSynthesizer(metadata)
        gaussian.fit(df)
        synthetic_gaussian = gaussian.sample(len(df))

        st.write("## Evaluation Metrics")

        for name, synthetic_df in [("CTGAN", synthetic_ctgan), ("TVAE", synthetic_tvae), ("Gaussian Copula", synthetic_gaussian)]:
            st.write(f"### {name} Results")

            diagnostic = run_diagnostic(real_data=df, synthetic_data=synthetic_df, metadata=metadata)
            quality = evaluate_quality(real_data=df, synthetic_data=synthetic_df, metadata=metadata)

            st.write("**Diagnostic Report:**")
            st.write(diagnostic.get_results())

            st.write("**Quality Report:**")
            st.write(quality.get_results())

            if sensitive_cols:
                st.write("**Privacy Metrics:**")
                disclosure_risks = {}
                for col in sensitive_cols:
                    risk = quality.get_details(property_name="Column Shapes", column_name=col)
                    disclosure_risks[col] = risk
                st.write(disclosure_risks)

            if target_col:
                st.write("**ML Utility Metrics:**")
                ml_utility = quality.get_details(property_name="Column Shapes", column_name=target_col)
                st.write({target_col: ml_utility})

            # Visualizing the comparison
            st.write("**Sample Data Comparison:**")
            st.write("Real Data")
            st.write(df.head(10))

            st.write(f"Synthetic Data ({name})")
            st.write(synthetic_df.head(10))